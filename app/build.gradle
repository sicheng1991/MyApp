apply plugin: 'com.android.application'
def config = rootProject.ext.android // 配置

def static releaseTime() {
    return new Date().format("yyyy-MM-dd HH_mm", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion
    flavorDimensions "25"


    defaultConfig {
        applicationId "com.chimu.myapp"
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionClientCode
        versionName config.versionClientName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

//        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
//                arguments = [moduleName: project.getName()]
            }
        }
//        lintOptions {
//            abortOnError false
//        }

        externalNativeBuild {
            cmake {
                cppFlags ""
                abiFilters "armeabi", "armeabi-v7a", "x86","arm64-v8a"
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    dataBinding{
        enabled  = true
    }


    buildTypes {
        release {
            buildConfigField "Boolean", "isDebug", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //打包报名3.0
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "MyApp_${defaultConfig.versionName}_${releaseTime()}.apk"
                }
            }

        }
        debug {
            buildConfigField "Boolean", "isDebug", "true"
        }

    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    productFlavors {
        beta {}
        sogou {}
        baidu {}
        c360 {}
        uc {}
    }

//    externalNativeBuild {
//        cmake {
//            path 'CMakeLists.txt'
//        }
//    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //测试依赖
    testCompile 'org.mockito:mockito-core:2.+'
    testCompile 'org.robolectric:robolectric:3.5.1'
    testCompile 'junit:junit:4.12'
//    compile 'com.android.support:appcompat-v7:26.0.2'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha9'
    compile 'com.facebook.network.connectionclass:connectionclass:1.0.1'
    compile 'com.alibaba:arouter-api:1.1.0'
    compile 'com.google.auto:auto-common:0.6'
    compile project(':mylib')
    //阿里热修复
    compile 'com.aliyun.ams:alicloud-android-hotfix:3.2.7'
    compile 'com.google.dagger:dagger:2.8'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.8'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '26.0.2'
            }
        }
    }
}

//3.0打jar包

def sdkDestinationPath = "build";
task deleteBuild(type: Delete) {
    //最终生成的jar的名字
    delete sdkDestinationPath + "cameraHelper.jar"
}

//3.0打jar包  gradle ->myApp ->Tasks ->other -> makerJar
task makeJar(type: Jar) {

    //指定生成的jar名
    baseName 'cameraHelper'
    //从哪里打包class文件
    from('build/intermediates/baidu/classes/debug')
    //去掉不需要打包的目录和文件，不知为何就是去不掉，处理办法是将不要的文件，文件夹先删除
    exclude('build/intermediates/baidu/classes/debug/android')
    exclude('BuildConfig.class', 'R.class')
    //去掉R$开头的文件
    exclude{ it.name.startsWith('R$');}
    //打包到jar后的目录结构
//    into(sdkDestinationPath)
    destinationDir = file(sdkDestinationPath)

}

//makeJar.dependsOn(deleteBuild, build)